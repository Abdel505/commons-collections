/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.commons.collections4.benchmark;

import org.openjdk.jmh.annotations.*;
import java.util.concurrent.TimeUnit;
import org.apache.commons.collections4.list.TreeList;

@BenchmarkMode(Mode.AverageTime)
@OutputTimeUnit(TimeUnit.NANOSECONDS)
@State(Scope.Thread)
public class TreeListBenchmark {

    @Param({"1000", "100000"})
    private int size;

    private TreeList<Integer> treeList;
    private Integer[] data;

    @Setup(Level.Trial)
    public void setUp() {
        treeList = new TreeList<>();
        data = new Integer[size];
        for (int i = 0; i < size; i++) {
            data[i] = i;
        }
    }

    @Benchmark
    public void insertAtEnd() {
        for (Integer v : data) {
            treeList.add(v);
        }
    }

    @Benchmark
    public void insertAtStart() {
        for (Integer v : data) {
            treeList.add(0, v);
        }
    }
}
